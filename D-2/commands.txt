(reverse '(1 2 3 4))

=========== Tut: 1 ===========
(load "testing.lisp")
(load "D-2/testing.lisp")

(compile-file "D-2/testing.lisp")
(load "D-2/testing")

(factorial 3)

(trace factorial)

(fibonacci 5)

------------------------------
#lists

(cons 1 2)
(cons 1 cons(2 nil))

(quote (2 3 5 7 11 13 17 19))

(first '(1 3 5))
(rest '(1 3 5))

(consp '(7 8 9))

(list-length '(2 3 5 7 11 13 17 19))

(list-length '(nil nil nil))	//=> 3
(list-length '())		//=> 0

(list-length '(first '(3 4 5 3 4 6 7 )))	//=> 2

(list-length (first '(3 4 5 3 4 6 7)))	//=> "A proper list must not end with 3"

