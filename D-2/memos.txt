a
pushd C:\WORKS\WS\WS_Lisp\D-2
clisp

(trace factorial)
(factorial 4)

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(load "func_1.lisp")
(addition 3)
 
(isor 3 5)
(bet 4 3 5)
(echo "abc")
(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(binomial 4 2)
(binomial 3 4)

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(list_binomial 4 2)

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(recursive-list-length '(20 15 01 09 07 53 43))
(recursive-list-length 4)

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(call_echo echo "yes")
(call_echo "yes")

(funcall echo "yes")

(call_echo (function echo) "yes")

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")
(call_binomial 4 2)

------------------------------
#2

(member 'a' (b a c d))
(member (a c) (b a c d))

#3 lambda	REF http://www.cs.sfu.ca/CourseCentral/310/pwfong/Lisp/2/source2.lisp
lambda (X) (not (member X L2))) L1)	;=> n/w

#4	//REF http://n-a-n-o.com/lisp/cmucl-tutorials/LISP-tutorial-21.html
(lambda (x) (+ x 3) 6)		;=> #<FUNCTION :LAMBDA (X) (+ X 3)>
((lambda (x) (+ x 3)) 10)	;=> 13

--------------------------------------
30/01/2015 09:43:26

(load "D-2/func_1.lisp")
(append '(a b c) '(c d e))
(list-length (append '(a b c) '(c d e)))

(trace list-append)
(list-append '(a b c) '(c d e))

(list-member 'above '(The correctness of the above implementation is easy to justify))
#(t (list-member 'above '(The correctness of the above implementation is easy to justify)))

(list-intersection '(a b c) '(d e b f))	#=> (B)
(list-intersection '(a b c) '(d e b f c))	#=> (B C)
(list-length (list-intersection '(a b c) '(d e b f)))	#=> 1
(trace list-intersection)
(list-intersection '(a b c) '(d e b f c))

(trace list-intersection-2)
(list-intersection-2 '(a b c) '(d e b f c))


--------------------------------------------
02/02/2015 20:26:35

(intersection '(a b c d) '(c d e f))
(union '(a b c d) '(c d e f))
(difference '(a b c d) '(c d e f))

(list-length (intersection '(a b c d) '(c d e f)))

(trace intersection)
(trace union)

(setq b '(1 2 2 ))

(cons a b)
(setq L1 (cons a b))

(setq tmp (cons 'char nil))
(setq tmp (cons 'char tmp))

(setq L1 '(a b c d))
(setq L2 '(c d e f))
(list-diff L1 L2)

--------------------------------------------
08/02/2015 20:55:37

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(reverse L1)

(return_from 17)

(trace return_from)

(open "D-2/memos.txt")
(setq f1 (open "D-2/memos.txt"))

//REF http://www.gigamonkeys.com/book/files-and-file-io.html
(let ((in (open "D-2/memos.txt")))
  (format t "~a~%" (read-line in))
  (close in))
--------------------------------------------
14/02/2015 07:20:30

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(setq L1 '(a b c d))
(reverse L1)
(setq L2 (reverse L1))

"abc \newline def"

(subseq "Among other things" 2 9)

(/ 3.0 7)

(reverse "Guess what function is associated with each of these symbols")

(sqrt -1.1)
#C(1 1)
(sqrt #C(1 1))
(sqrt (sqrt #C(1 1)))

(numberp 2)
(numberp "design")


--------------------------------------------
23/02/2015 10:25:01

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(defparameter *my-string* (string "Groucho Marx"))

(subseq *my-string* 0 7)

(setq s1 "abcdef")

(subseq s1 0 5)

(string-upcase "We'll discuss the format")

(if (> 2 1) (print "YES") (print "No"))

//(if (= "a" "a")
//(if (eq "a" "a")
(if (string= "a" "a")

	(progn
		(print "yes")
		(print "mostly")
		(print "great")
	)
	
	(+ 4 2 3)
)

(setf x 3)	//=> works
(setf x (* 2 5))	//=> 

//(let ((a 3) (+ a 3)))	//=> n/w
(let ((a 3)) (+ a 3))
(let ((a 3)(b "abc")) (+ a 3)(b))	//=> undefined: B
(let ((a 3)(b "abc")) (+ a 3)(print b))

--------------------------------------------
25/02/2015 08:17:02

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(reverse "just one expression")

(first-n-chars "first-n-chars" 4 t)

--------------------------------------------
27/02/2015 20:52:15

(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(print-string-stuff "the function returns")

(factorial_2 20)

(my-equation 4)

--------------------------------------------
21/03/2015 15:32:27
(load "C:/WORKS/WS/WS_Lisp/D-2/func_1.lisp")

(factorial_2 20)

(dolist (x '(a b c d e))
          (print x))

(time_process)
(time (time_process))

(compile 'time_process)

(factorial 5)

(time (factorial 5))

;(compile-file "func_1.lisp")
(compile-file "D-2/func_1.lisp")

;REF http://www.cs.utexas.edu/~mtimkvch/lisp_tutorial.html#variables-and-data-types "Functional Programming"
(defun square (x)
  (* x x))
  
(mapcar 'square '(1 2 3 4 5))

(remove-if 'oddp '(1 2 3 4 5))
  
  
--------------------------------------------
--------------------------------------------
--------------------------------------------
--------------------------------------------
